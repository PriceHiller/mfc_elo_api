from API.Database import BaseDB

db = BaseDB.db


class BaseCrud:



    @staticmethod
    async def call_procedure(procedure_name: str, *args):
        """
        Calls a database procedure with optional arguments.

        Should NOT be interfaced without an intermediary function to check types in arguments.

        https://www.postgresqltutorial.com/postgresql-create-procedure/

        create table accounts (
            id int generated by default as identity,
            name varchar(100) not null,
            balance dec(15,2) not null,
            primary key(id)
        );

        create or replace procedure transfer(
           sender int,
           receiver int,
           amount dec
        )
        language plpgsql
        as $$
        begin
            -- subtracting the amount from the sender's account
            update accounts
            set balance = balance - amount
            where id = sender;

            -- adding the amount to the receiver's account
            update accounts
            set balance = balance + amount
            where id = receiver;

            commit;
        end;$$
        """

        procedure_name = procedure_name.strip()
        procedure_call = f"call {procedure_name}"

        if len(args) > 1:
            procedure_call += "(" + (", ".join(args)).rstrip() + ")"
        elif len(args) == 1:
            procedure_call += "(" + args[0] + ")"
        else:
            procedure_call += "()"

        procedure_call += ";"

        return await db.execute(procedure_call)
